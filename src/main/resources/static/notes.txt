<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>JIRA Bot Dashboard</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f4;
            margin: 40px;
            color: #333;
        }
        h1 {
            color: #0052cc;
        }
        h2 {
            color: #0366d6;
        }
        h3 {
            color: green;
        }
        .container {
            display: flex;
            justify-content: space-between;
            flex-wrap: wrap;
        }
        .plot-container {
            background-color: #fff;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
            margin: 10px;
            padding: 20px;
            border-radius: 8px;
            flex: 1 1 calc(33.333% - 20px);
            box-sizing: border-box;
        }
        button {
            background-color: #28a745;
            color: white;
            border: none;
            padding: 10px 20px;
            font-size: 16px;
            cursor: pointer;
            border-radius: 5px;
            margin-top: 20px;
        }
        button:hover {
            background-color: #218838;
        }
        form {
            text-align: center;
        }
    </style>
    <script src="{{ url_for('static', filename='plotly-latest.min.js') }}"></script>
    <script>
        function disableButton(button) {
            button.disabled = true;
            button.innerText = 'Processing...';
            document.getElementById('runNowForm').submit();
        }

        // Trigger a resize event on window load to ensure Plotly graphs are resized correctly
        window.addEventListener('load', () => {
            window.dispatchEvent(new Event('resize'));
        });
    </script>
</head>
<body>
    <h1>JIRA Bot Dashboard</h1>
    <h3>Status: {{ heartbeat }}</h3>
    <form id="runNowForm" method="post" action="/run_now">
        <button type="submit" onclick="disableButton(this)">Run Now</button>
    </form>
    <div class="container">
        <div class="plot-container">
            <h2>Daily Tickets Created</h2>
            {{ daily_img|safe }}
        </div>
        <div class="plot-container">
            <h2>Weekly Tickets Created</h2>
            {{ weekly_img|safe }}
        </div>
        <div class="plot-container">
            <h2>Monthly Tickets Created</h2>
            {{ monthly_img|safe }}
        </div>
    </div>
</body>
</html>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>JIRA Bot Dashboard</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f4;
            margin: 40px;
            color: #333;
        }
        h1 {
            color: #0052cc;
        }
        h2 {
            color: #0366d6;
        }
        h3 {
            color: green;
        }
        .container {
            display: flex;
            justify-content: space-between;
            flex-wrap: wrap;
        }
        .plot-container {
            background-color: #fff;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
            margin: 10px;
            padding: 20px;
            border-radius: 8px;
            flex: 1 1 calc(33.333% - 20px);
            box-sizing: border-box;
        }
        button {
            background-color: #28a745;
            color: white;
            border: none;
            padding: 10px 20px;
            font-size: 16px;
            cursor: pointer;
            border-radius: 5px;
            margin-top: 20px;
        }
        button:hover {
            background-color: #218838;
        }
        form {
            text-align: center;
        }
    </style>
    <script src="{{ url_for('static', filename='plotly-latest.min.js') }}"></script>
    <script>
        function disableButton(button) {
            button.disabled = true;
            button.innerText = 'Processing...';
            document.getElementById('runNowForm').submit();
        }
    </script>
</head>
<body>
    <h1>JIRA Bot Dashboard</h1>
    <h3>Status: {{ heartbeat }}</h3>
    <form id="runNowForm" method="post" action="/run_now">
        <button type="submit" onclick="disableButton(this)">Run Now</button>
    </form>
    <div class="container">
        <div class="plot-container">
            <h2>Daily Tickets Created</h2>
            {{ daily_img|safe }}
        </div>
        <div class="plot-container">
            <h2>Weekly Tickets Created</h2>
            {{ weekly_img|safe }}
        </div>
        <div class="plot-container">
            <h2>Monthly Tickets Created</h2>
            {{ monthly_img|safe }}
        </div>
    </div>
</body>
</html>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>JIRA Bot Dashboard</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f4;
            margin: 40px;
            color: #333;
        }
        h1 {
            color: #0052cc;
        }
        h2 {
            color: #0366d6;
        }
        h3 {
            color: green;
        }
        .container {
            background-color: #fff;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
            margin-top: 20px;
            padding: 20px;
            border-radius: 8px;
            overflow: hidden;
        }
        button {
            background-color: #28a745;
            color: white;
            border: none;
            padding: 10px 20px;
            font-size: 16px;
            cursor: pointer;
            border-radius: 5px;
            margin-top: 20px;
        }
        button:hover {
            background-color: #218838;
        }
        form {
            text-align: center;
        }
        .plot-container {
            margin: 20px 0;
        }
    </style>
    <script src="{{ url_for('static', filename='plotly-latest.min.js') }}"></script>
    <script>
        function disableButton(button) {
            button.disabled = true;
            button.innerText = 'Processing...';
            document.getElementById('runNowForm').submit();
        }
    </script>
</head>
<body>
    <h1>JIRA Bot Dashboard</h1>
    <h3>Status: {{ heartbeat }}</h3>
    <form id="runNowForm" method="post" action="/run_now">
        <button type="submit" onclick="disableButton(this)">Run Now</button>
    </form>
    <div class="container plot-container">
        <h2>Daily Tickets Created</h2>
        {{ daily_img|safe }}
    </div>
    <div class="container plot-container">
        <h2>Weekly Tickets Created</h2>
        {{ weekly_img|safe }}
    </div>
    <div class="container plot-container">
        <h2>Monthly Tickets Created</h2>
        {{ monthly_img|safe }}
    </div>
</body>
</html>

import threading
import time
import schedule
from flask import Flask, render_template, redirect, url_for, request
import plotly.graph_objs as go
import plotly.io as pio
import sqlite3
from datetime import datetime

app = Flask(__name__)

# Global lock for "Run Now" functionality
run_now_lock = threading.Lock()
is_running = False

def check_mailbox():
    print("Checking mailbox...")
    # Simulate a long-running task
    time.sleep(10)
    print("Mailbox checked.")

def run_scheduler():
    while True:
        schedule.run_pending()
        time.sleep(1)

def get_db_connection():
    conn = sqlite3.connect('jira_bot.db')
    conn.row_factory = sqlite3.Row
    return conn

def query_database(query):
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute(query)
    data = cur.fetchall()
    conn.close()
    return data

def create_graph(data, title):
    labels = [datetime.strptime(x['period'], '%Y-%m-%d') for x in data]
    values = [x['count'] for x in data]

    fig = go.Figure([go.Bar(x=labels, y=values)])
    fig.update_layout(
        title=title,
        xaxis_title='Date',
        yaxis_title='Number of Tickets',
        xaxis_tickangle=-45
    )

    graph_html = pio.to_html(fig, full_html=False)
    return graph_html

@app.route('/')
def index():
    daily_query = "SELECT date(timestamp) as period, COUNT(*) as count FROM events GROUP BY date(timestamp) ORDER BY date(timestamp);"
    daily_data = query_database(daily_query)
    daily_img = create_graph(daily_data, 'Daily Tickets Created')

    weekly_query = "SELECT strftime('%Y-%W', timestamp) as period, COUNT(*) as count FROM events GROUP BY strftime('%Y-%W', timestamp) ORDER BY strftime('%Y-%W', timestamp);"
    weekly_data = query_database(weekly_query)
    weekly_img = create_graph(weekly_data, 'Weekly Tickets Created')

    monthly_query = "SELECT strftime('%Y-%m', timestamp) as period, COUNT(*) as count FROM events GROUP BY strftime('%Y-%m', timestamp) ORDER BY strftime('%Y-%m', timestamp);"
    monthly_data = query_database(monthly_query)
    monthly_img = create_graph(monthly_data, 'Monthly Tickets Created')

    return render_template('index.html', daily_img=daily_img, weekly_img=weekly_img, monthly_img=monthly_img)

@app.route('/run_now', methods=['POST'])
def run_now():
    global is_running
    with run_now_lock:
        if not is_running:
            is_running = True
            try:
                # Execute check_mailbox in the main thread
                check_mailbox()
            finally:
                is_running = False
        else:
            return "Already running", 429  # Too Many Requests

    return redirect(url_for('index'))

def start_scheduler():
    # Schedule the check_mailbox function to run every 10 minutes
    schedule.every(10).minutes.do(check_mailbox)
    run_scheduler()

if __name__ == '__main__':
    # Start the scheduler in a new thread
    scheduler_thread = threading.Thread(target=start_scheduler)
    scheduler_thread.start()

    # Start the Flask app
    app.run(debug=True, use_reloader=False)


# JIRA Bot

JIRA Bot is a Python-based automation tool designed to monitor a specific mailbox for developer tool-related queries and automatically create corresponding JIRA tickets. Additionally, JIRA Bot logs events into an embedded SQLite database, which can be visualized using Flask and Matplotlib for detailed reports and analysis.

## Features

- **Email Monitoring**: Continuously monitors a specified mailbox for incoming emails and processes them to create JIRA tickets.
- **JIRA Ticket Creation**: Automatically creates JIRA tickets based on the content of the received emails.
- **Event Logging**: Logs events into an SQLite database for further analysis and reporting.
- **Visualization**: Provides interactive and dynamic visual reports using Flask and Matplotlib, including daily, weekly, and monthly summaries of tickets created.

## Prerequisites

- Python 3.x
- JIRA instance with API access
- Mailbox credentials and access
- SQLite (comes with Python's standard library)
- Required Python packages: `jira`, `sqlite3`, `matplotlib`, `flask`

## Installation

1. **Clone the Repository**

   ```bash
   git clone https://github.com/yourusername/jirabot.git
   cd jirabot        filename = f"{email.subject[:30]}_{email.datetime_received.strftime('%Y%m%d%H%M%S')}.html"
        filename = "".join(c for c in filename if c.isalnum() or c in (' ', '.', '_')).rstrip()
        jira.add_attachment(issue=new_issue, attachment=html_file, filename=filename)


import sqlite3
from sqlite3 import Error

def create_connection(db_file):
    """Create a database connection to a SQLite database."""
    conn = None
    try:
        conn = sqlite3.connect(db_file)
        print(f"SQLite version: {sqlite3.version}")
    except Error as e:
        print(e)
    return conn

def create_table(conn, create_table_sql):
    """Create a table from the create_table_sql statement."""
    try:
        c = conn.cursor()
        c.execute(create_table_sql)
    except Error as e:
        print(e)

def main():
    database = "jira_bot.db"

    sql_create_events_table = """
    CREATE TABLE IF NOT EXISTS events (
        id integer PRIMARY KEY,
        timestamp text NOT NULL,
        category text,
        issue_key text
    );
    """

    # Create a database connection
    conn = create_connection(database)

    # Create table
    if conn:
        create_table(conn, sql_create_events_table)
        conn.close()
    else:
        print("Error! cannot create the database connection.")

if __name__ == '__main__':
    main()


import datetime

def insert_event(conn, event):
    """
    Insert a new event into the events table.
    :param conn: Connection object
    :param event: A tuple (timestamp, category, issue_key)
    """
    sql = ''' INSERT INTO events(timestamp, category, issue_key)
              VALUES(?,?,?) '''
    cur = conn.cursor()
    cur.execute(sql, event)
    conn.commit()
    return cur.lastrowid

# Example usage
conn = create_connection("jira_bot.db")
event = (datetime.datetime.now().isoformat(), 'Node.js', 'JIRA-123')
event_id = insert_event(conn, event)
print(f"Event created with id: {event_id}")
conn.close()


def query_events(conn, query):
    """
    Query events from the events table.
    :param conn: Connection object
    :param query: SQL query string
    """
    cur = conn.cursor()
    cur.execute(query)
    rows = cur.fetchall()
    return rows

# Example usage for querying events
conn = create_connection("jira_bot.db")
today_query = "SELECT COUNT(*) FROM events WHERE date(timestamp) = date('now');"
today_count = query_events(conn, today_query)
print(f"Tickets created today: {today_count[0][0]}")

this_week_query = "SELECT COUNT(*) FROM events WHERE strftime('%W', timestamp) = strftime('%W', 'now');"
this_week_count = query_events(conn, this_week_query)
print(f"Tickets created this week: {this_week_count[0][0]}")

this_month_query = "SELECT COUNT(*) FROM events WHERE strftime('%m', timestamp) = strftime('%m', 'now');"
this_month_count = query_events(conn, this_month_query)
print(f"Tickets created this month: {this_month_count[0][0]}")

conn.close()


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>JIRA Bot Dashboard</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f4;
            margin: 40px;
            color: #333;
        }
        h1 {
            color: #0052cc;
        }
        h2 {
            color: #0366d6;
        }
        h3 {
            color: green;
        }
        div {
            background-color: #fff;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
            margin-top: 20px;
            padding: 20px;
            border-radius: 8px;
        }
        button {
            background-color: #28a745;
            color: white;
            border: none;
            padding: 10px 20px;
            font-size: 16px;
            cursor: pointer;
            border-radius: 5px;
            margin-top: 20px;
        }
        button:hover {
            background-color: #218838;
        }
        img {
            width: 100%;
            max-width: 600px;
            height: auto;
        }
        form {
            text-align: center;
        }
    </style>
</head>
<body>
    <h1>JIRA Bot Dashboard</h1>
    <h3>Status: {{ heartbeat }}</h3>
    <form method="post">
        <button type="submit">Run Now</button>
    </form>
    <div>
        <h2>Daily Tickets Created</h2>
        <img src="{{ daily_img }}" alt="Daily Tickets Graph">
    </div>
    <div>
        <h2>Weekly Tickets Created</h2>
        <img src="{{ weekly_img }}" alt="Weekly Tickets Graph">
    </div>
    <div>
        <h2>Monthly Tickets Created</h2>
        <img src="{{ monthly_img }}" alt="Monthly Tickets Graph">
    </div>
</body>
</html>

from flask import Flask, render_template, request, redirect, url_for
import matplotlib.pyplot as plt
import sqlite3
import base64
import io

app = Flask(__name__)

def get_db_connection():
    conn = sqlite3.connect('jira_bot.db')
    conn.row_factory = sqlite3.Row
    return conn

def query_database(query):
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute(query)
    data = cur.fetchall()
    conn.close()
    return data

def create_graph(data, title):
    labels = [x['period'] for x in data]
    values = [x['count'] for x in data]
    plt.figure(figsize=(10, 5))
    plt.bar(labels, values, color='blue')
    plt.xlabel('Period')
    plt.ylabel('Number of Tickets')
    plt.title(title)
    plt.grid(True)
    img = io.BytesIO()
    plt.savefig(img, format='png', bbox_inches='tight')
    plt.close()
    img.seek(0)
    img_base64 = base64.b64encode(img.getvalue()).decode('utf8')
    return f"data:image/png;base64,{img_base64}"

@app.route('/', methods=['GET', 'POST'])
def index():
    heartbeat = "Active"  # Simple status indicator
    if request.method == 'POST':
        # This is where you handle the "Run Now" logic
        print("Run Now was triggered!")
        return redirect(url_for('index'))

    # Generate data for all graphs
    daily_img, weekly_img, monthly_img = generate_all_graphs()
    return render_template('index.html', daily_img=daily_img, weekly_img=weekly_img, monthly_img=monthly_img, heartbeat=heartbeat)

def generate_all_graphs():
    daily_query = "SELECT date(timestamp) as period, COUNT(*) as count FROM events GROUP BY date(timestamp) ORDER BY date(timestamp);"
    daily_data = query_database(daily_query)
    daily_img = create_graph(daily_data, 'Daily Tickets Created')

    weekly_query = "SELECT strftime('%W', timestamp) as period, COUNT(*) as count FROM events GROUP BY strftime('%W', timestamp) ORDER BY strftime('%W', timestamp);"
    weekly_data = query_database(weekly_query)
    weekly_img = create_graph(weekly_data, 'Weekly Tickets Created')

    monthly_query = "SELECT strftime('%m', timestamp) as period, COUNT(*) as count FROM events GROUP BY strftime('%m', timestamp) ORDER BY strftime('%m', timestamp);"
    monthly_data = query_database(monthly_query)
    monthly_img = create_graph(monthly_data, 'Monthly Tickets Created')

    return daily_img, weekly_img, monthly_img

if __name__ == '__main__':
    app.run(debug=True)


import sqlite3
import random
from datetime import datetime, timedelta
import json

def create_connection(db_file):
    """ Create a database connection to the SQLite database specified by db_file """
    conn = sqlite3.connect(db_file)
    return conn

def insert_dummy_data(conn, num_records):
    """ Insert dummy data into the events table """
    categories = ['Node.js', 'Java', 'IDEs', '.NET', 'Visual Studio', 'Database']
    cur = conn.cursor()

    base_date = datetime.now()
    for i in range(num_records):
        # Generate a random date within the past 30 days
        days_back = random.randint(0, 30)
        timestamp = base_date - timedelta(days=days_back)

        # Randomly select 1-3 categories for each entry
        num_cats = random.randint(1, 3)
        selected_categories = random.sample(categories, num_cats)

        # Create a unique-ish issue key
        issue_key = f'ISSUE-{1000 + i}'

        # Insert data into the events table
        cur.execute("INSERT INTO events (timestamp, categories, issue_key) VALUES (?, ?, ?)",
                    (timestamp.isoformat(), json.dumps(selected_categories), issue_key))

    conn.commit()

# Usage
db_path = 'jira_bot.db'  # Your database file path
conn = create_connection(db_path)
insert_dummy_data(conn, 30)  # Generate and insert 30+ rows of dummy data
conn.close()


import os
from cryptography.fernet import Fernet
import argparse
import sqlite3

def generate_key():
    """Generates a secure key."""
    return Fernet.generate_key()

def encrypt_data(data, key):
    """Encrypts data using the provided key."""
    fernet = Fernet(key)
    encrypted = fernet.encrypt(data.encode())
    return encrypted

def store_key_in_db(key):
    """Stores the key in a SQLite database."""
    conn = sqlite3.connect('jira_bot.db')
    c = conn.cursor()
    c.execute('CREATE TABLE IF NOT EXISTS encryption_keys (id INTEGER PRIMARY KEY, key TEXT)')
    c.execute('INSERT INTO encryption_keys (key) VALUES (?)', (key.decode(),))
    conn.commit()
    conn.close()

def get_args():
    parser = argparse.ArgumentParser(description="Encrypt environment variable values")
    parser.add_argument('data', nargs='+', help='Key-value pairs in the format key=value')
    return parser.parse_args()

def set_env_variables(pairs, key):
    """Sets encrypted environment variables."""
    print("Setting encrypted environment variables:")
    for pair in pairs:
        if '=' in pair:
            env_key, value = pair.split('=', 1)
            encrypted_value = encrypt_data(value, key).decode()
            os.environ[env_key] = encrypted_value
            print(f"{env_key} set successfully.")
        else:
            print(f"Error: Data should be in the format key=value for {pair}")

def main():
    args = get_args()
    key = generate_key()  # Generate a new key for encryption
    store_key_in_db(key)  # Store the key in the database

    set_env_variables(args.data, key)  # Set environment variables

if __name__ == "__main__":
    main()


import sqlite3
from cryptography.fernet import Fernet

def retrieve_key_from_db():
    """Retrieves the encryption key from the SQLite database."""
    conn = sqlite3.connect('jira_bot.db')
    c = conn.cursor()
    c.execute('SELECT key FROM encryption_keys ORDER BY id DESC LIMIT 1')
    key = c.fetchone()[0]
    conn.close()
    return key.encode()

def decrypt_data(encrypted_data):
    """Decrypts data using the retrieved key."""
    key = retrieve_key_from_db()
    fernet = Fernet(key)
    decrypted = fernet.decrypt(encrypted_data.encode())
    return decrypted.decode()

# Example usage:
encrypted_data = 'your_encrypted_data_here'
print("Decrypted value:", decrypt_data(encrypted_data))


python encrypt_secrets.py API_KEY=123456789 SECRET_KEY=abcdefg DATABASE_PASSWORD=password123

def display_all_records(db_file):
    """ Fetch and display all records from the events table """
    conn = create_connection(db_file)  # Create a database connection
    cursor = conn.cursor()

    query = "SELECT id, timestamp, category, issue_key FROM events ORDER BY id"
    cursor.execute(query)

    print("Displaying all records:")
    print("{:<10} {:<20} {:<15} {:<10}".format("ID", "Timestamp", "Category", "Issue Key"))  # Header
    for row in cursor.fetchall():
        print("{:<10} {:<20} {:<15} {:<10}".format(row[0], row[1], row[2], row[3]))

from matplotlib.dates import AutoDateLocator, AutoDateFormatter
import matplotlib.dates as mdates

def create_graph(data, title):
    labels = [datetime.strptime(x['period'], '%Y-%m-%d') for x in data]  # Ensure labels are datetime objects
    values = [x['count'] for x in data]

    plt.figure(figsize=(10, 5))
    plt.bar(labels, values, color='blue')
    plt.xlabel('Date')
    plt.ylabel('Number of Tickets')
    plt.title(title)

    # Set date formatting on x-axis
    ax = plt.gca()  # Get current axis
    ax.xaxis.set_major_locator(mdates.DayLocator(interval=1))  # Set major ticks to daily
    ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.grid(True)

    img = io.BytesIO()
    plt.savefig(img, format='png', bbox_inches='tight')
    plt.close()
    img.seek(0)
    img_base64 = base64.b64encode(img.getvalue()).decode('utf8')
    return f"data:image/png;base64,{img_base64}"


import re

# Dictionary defined by users
CATEGORIES = {
    "Java": ["jdk", "java", "spring", "maven", "gradle"],
    "IDE-VSCode": ["vscode", "visual studio code"],
    "Node.js": ["node.js", "npm", "yarn"],
    "IDE-Visual Studio": ["visual studio"]
}

def convert_to_regex_patterns(categories):
    """Converts a dictionary of tool categories and their keywords to regex patterns."""
    regex_categories = {}
    for key, tools in categories.items():
        regex_list = []
        for tool in tools:
            # Split on non-alphanumeric sequences and replace them with optional whitespace or the exact character
            parts = re.split(r'(\W+)', tool)
            pattern = r'\b'
            for part in parts:
                if part.isalnum():  # it's a word, escape normally
                    pattern += re.escape(part)
                else:  # it's non-word characters, replace with optional non-alphanumeric
                    pattern += r'[\s' + re.escape(part) + r']*'
            pattern += r'\b'
            regex_list.append(pattern)
        regex_categories[key] = regex_list
    return regex_categories

def find_tools_in_text(text, regex_categories):
    """Searches for tool mentions in text based on regex patterns."""
    found_tools = {}
    for category, patterns in regex_categories.items():
        for pattern in patterns:
            if re.search(pattern, text, re.IGNORECASE):
                if category not in found_tools:
                    found_tools[category] = []
                found_tools[category].append(re.search(pattern, text, re.IGNORECASE).group())
    return found_tools

# Convert categories to regex patterns
regex_patterns = convert_to_regex_patterns(CATEGORIES)

# Sample text to search
sample_text = "Hi Team, Am looking for some help in visual studio code, When I run after the recent patch, I am getting this below error. Refer: Screenshot."

# Find tools in the sample text
found_tools = find_tools_in_text(sample_text, regex_patterns)
list_of_keys = list(found_tools.keys())
print(list_of_keys)

print("Found tools in text:")
print(found_tools)


# JIRA Bot

JIRA Bot is a Python-based automation tool designed to monitor a specific mailbox for developer tool-related queries and automatically create corresponding JIRA tickets. Additionally, JIRA Bot logs events into an embedded SQLite database, which can be visualized using Flask and Matplotlib for detailed reports and analysis.

## Features

- **Email Monitoring**: Continuously monitors a specified mailbox for incoming emails and processes them to create JIRA tickets.
- **JIRA Ticket Creation**: Automatically creates JIRA tickets based on the content of the received emails.
- **Event Logging**: Logs events into an SQLite database for further analysis and reporting.
- **Visualization**: Provides interactive and dynamic visual reports using Flask and Matplotlib, including daily, weekly, and monthly summaries of tickets created.

## Prerequisites

- Python 3.x
- JIRA instance with API access
- Mailbox credentials and access
- SQLite (comes with Python's standard library)
- Required Python packages: `jira`, `sqlite3`, `matplotlib`, `flask`

## Installation

1. **Clone the Repository**

   ```bash
   git clone https://github.com/yourusername/jirabot.git
   cd jirabot