        filename = f"{email.subject[:30]}_{email.datetime_received.strftime('%Y%m%d%H%M%S')}.html"
        filename = "".join(c for c in filename if c.isalnum() or c in (' ', '.', '_')).rstrip()
        jira.add_attachment(issue=new_issue, attachment=html_file, filename=filename)


import sqlite3
from sqlite3 import Error

def create_connection(db_file):
    """Create a database connection to a SQLite database."""
    conn = None
    try:
        conn = sqlite3.connect(db_file)
        print(f"SQLite version: {sqlite3.version}")
    except Error as e:
        print(e)
    return conn

def create_table(conn, create_table_sql):
    """Create a table from the create_table_sql statement."""
    try:
        c = conn.cursor()
        c.execute(create_table_sql)
    except Error as e:
        print(e)

def main():
    database = "jira_bot.db"

    sql_create_events_table = """
    CREATE TABLE IF NOT EXISTS events (
        id integer PRIMARY KEY,
        timestamp text NOT NULL,
        category text,
        issue_key text
    );
    """

    # Create a database connection
    conn = create_connection(database)

    # Create table
    if conn:
        create_table(conn, sql_create_events_table)
        conn.close()
    else:
        print("Error! cannot create the database connection.")

if __name__ == '__main__':
    main()


import datetime

def insert_event(conn, event):
    """
    Insert a new event into the events table.
    :param conn: Connection object
    :param event: A tuple (timestamp, category, issue_key)
    """
    sql = ''' INSERT INTO events(timestamp, category, issue_key)
              VALUES(?,?,?) '''
    cur = conn.cursor()
    cur.execute(sql, event)
    conn.commit()
    return cur.lastrowid

# Example usage
conn = create_connection("jira_bot.db")
event = (datetime.datetime.now().isoformat(), 'Node.js', 'JIRA-123')
event_id = insert_event(conn, event)
print(f"Event created with id: {event_id}")
conn.close()


def query_events(conn, query):
    """
    Query events from the events table.
    :param conn: Connection object
    :param query: SQL query string
    """
    cur = conn.cursor()
    cur.execute(query)
    rows = cur.fetchall()
    return rows

# Example usage for querying events
conn = create_connection("jira_bot.db")
today_query = "SELECT COUNT(*) FROM events WHERE date(timestamp) = date('now');"
today_count = query_events(conn, today_query)
print(f"Tickets created today: {today_count[0][0]}")

this_week_query = "SELECT COUNT(*) FROM events WHERE strftime('%W', timestamp) = strftime('%W', 'now');"
this_week_count = query_events(conn, this_week_query)
print(f"Tickets created this week: {this_week_count[0][0]}")

this_month_query = "SELECT COUNT(*) FROM events WHERE strftime('%m', timestamp) = strftime('%m', 'now');"
this_month_count = query_events(conn, this_month_query)
print(f"Tickets created this month: {this_month_count[0][0]}")

conn.close()


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>JIRA Bot Dashboard</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f4;
            margin: 40px;
            color: #333;
        }
        h1 {
            color: #0052cc;
        }
        h2 {
            color: #0366d6;
        }
        h3 {
            color: green;
        }
        div {
            background-color: #fff;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
            margin-top: 20px;
            padding: 20px;
            border-radius: 8px;
        }
        button {
            background-color: #28a745;
            color: white;
            border: none;
            padding: 10px 20px;
            font-size: 16px;
            cursor: pointer;
            border-radius: 5px;
            margin-top: 20px;
        }
        button:hover {
            background-color: #218838;
        }
        img {
            width: 100%;
            max-width: 600px;
            height: auto;
        }
        form {
            text-align: center;
        }
    </style>
</head>
<body>
    <h1>JIRA Bot Dashboard</h1>
    <h3>Status: {{ heartbeat }}</h3>
    <form method="post">
        <button type="submit">Run Now</button>
    </form>
    <div>
        <h2>Daily Tickets Created</h2>
        <img src="{{ daily_img }}" alt="Daily Tickets Graph">
    </div>
    <div>
        <h2>Weekly Tickets Created</h2>
        <img src="{{ weekly_img }}" alt="Weekly Tickets Graph">
    </div>
    <div>
        <h2>Monthly Tickets Created</h2>
        <img src="{{ monthly_img }}" alt="Monthly Tickets Graph">
    </div>
</body>
</html>

from flask import Flask, render_template, request, redirect, url_for
import matplotlib.pyplot as plt
import sqlite3
import base64
import io

app = Flask(__name__)

def get_db_connection():
    conn = sqlite3.connect('jira_bot.db')
    conn.row_factory = sqlite3.Row
    return conn

def query_database(query):
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute(query)
    data = cur.fetchall()
    conn.close()
    return data

def create_graph(data, title):
    labels = [x['period'] for x in data]
    values = [x['count'] for x in data]
    plt.figure(figsize=(10, 5))
    plt.bar(labels, values, color='blue')
    plt.xlabel('Period')
    plt.ylabel('Number of Tickets')
    plt.title(title)
    plt.grid(True)
    img = io.BytesIO()
    plt.savefig(img, format='png', bbox_inches='tight')
    plt.close()
    img.seek(0)
    img_base64 = base64.b64encode(img.getvalue()).decode('utf8')
    return f"data:image/png;base64,{img_base64}"

@app.route('/', methods=['GET', 'POST'])
def index():
    heartbeat = "Active"  # Simple status indicator
    if request.method == 'POST':
        # This is where you handle the "Run Now" logic
        print("Run Now was triggered!")
        return redirect(url_for('index'))

    # Generate data for all graphs
    daily_img, weekly_img, monthly_img = generate_all_graphs()
    return render_template('index.html', daily_img=daily_img, weekly_img=weekly_img, monthly_img=monthly_img, heartbeat=heartbeat)

def generate_all_graphs():
    daily_query = "SELECT date(timestamp) as period, COUNT(*) as count FROM events GROUP BY date(timestamp) ORDER BY date(timestamp);"
    daily_data = query_database(daily_query)
    daily_img = create_graph(daily_data, 'Daily Tickets Created')

    weekly_query = "SELECT strftime('%W', timestamp) as period, COUNT(*) as count FROM events GROUP BY strftime('%W', timestamp) ORDER BY strftime('%W', timestamp);"
    weekly_data = query_database(weekly_query)
    weekly_img = create_graph(weekly_data, 'Weekly Tickets Created')

    monthly_query = "SELECT strftime('%m', timestamp) as period, COUNT(*) as count FROM events GROUP BY strftime('%m', timestamp) ORDER BY strftime('%m', timestamp);"
    monthly_data = query_database(monthly_query)
    monthly_img = create_graph(monthly_data, 'Monthly Tickets Created')

    return daily_img, weekly_img, monthly_img

if __name__ == '__main__':
    app.run(debug=True)
