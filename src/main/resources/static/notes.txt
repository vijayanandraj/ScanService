sentence1,sentence2,label
"How do I install Jenkins on Ubuntu?", "What are the steps to set up Jenkins on an Ubuntu server?",1
"How can I create a new repository in Bitbucket?", "What's the process for initializing a repository on Bitbucket?",1
"How to configure Sonarqube for code quality analysis?", "What settings should I adjust in Sonarqube to evaluate code quality?",1
"How do I use Ansible to automate server deployments?", "What are the Ansible commands for automating the deployment of servers?",1
"How to integrate Confluence with Jira?", "What is the method to link Confluence pages to Jira tickets?",1
"How do I troubleshoot Jenkins build failures?", "What steps should I take to fix failed builds in Jenkins?",1
"How to set up Bitbucket pipelines for CI/CD?", "What is the procedure to configure CI/CD pipelines in Bitbucket?",1
"How can Sonarqube help in maintaining code standards?", "In what ways does Sonarqube assist with enforcing coding standards?",1
"How to manage playbooks in Ansible?", "What is the best practice for organizing Ansible playbooks?",1
"How do I create Jira dashboards for project tracking?", "What's the way to set up dashboards in Jira for monitoring projects?",1
"How to secure Jenkins with authentication?", "What methods can I use to add authentication to Jenkins?",1
"How can I merge branches in Bitbucket?", "What's the process for merging different branches in Bitbucket repositories?",1
"How to analyze code smells using Sonarqube?", "What steps do I follow to detect code smells with Sonarqube?",1
"How do I deploy applications using Ansible?", "What are the commands to deploy apps through Ansible?",1
"How to collaborate using Confluence and Jira together?", "What is the way to use Confluence and Jira for team collaboration?",1
"How to resolve Jenkins plugin compatibility issues?", "What should I do if Jenkins plugins are not compatible with each other?",1
"How to set up access controls in Bitbucket?", "What's the method to configure user permissions in Bitbucket?",1
"How can Sonarqube integrate with Jenkins?", "What is the process to connect Sonarqube with Jenkins for continuous integration?",1
"How to write Ansible roles for infrastructure management?", "What steps are involved in creating Ansible roles for managing infrastructure?",1
"How to track issues in Jira using Confluence?", "What is the way to monitor Jira issues through Confluence pages?",1
"How do I update Jenkins to the latest version?", "What's the procedure for upgrading Jenkins to its newest release?",1
"How can I clone a Bitbucket repository locally?", "What commands do I use to clone a repository from Bitbucket to my machine?",1
"How to interpret Sonarqube analysis reports?", "What should I understand from the reports generated by Sonarqube?",1
"How to configure Ansible inventory files?", "What is the method to set up inventory files in Ansible?",1
"How do I create a Confluence space for my team?", "What's the process to establish a new space in Confluence for team collaboration?",1
"How to assign tasks in Jira projects?", "What steps do I follow to allocate tasks within Jira project boards?",1
"How to back up Jenkins configurations?", "What's the way to create backups of Jenkins setup and configurations?",1
"How can I enable branch permissions in Bitbucket?", "What is the method to set branch access controls in Bitbucket?",1
"How to set quality gates in Sonarqube?", "What steps do I take to establish quality gates within Sonarqube?",1
"How do I use Ansible to manage Docker containers?", "What are the Ansible playbooks for handling Docker container deployments?",1
"How to link Jira issues to Confluence documents?", "What's the procedure to associate Jira tickets with Confluence pages?",1


from sentence_transformers import SentenceTransformer, InputExample, losses
from torch.utils.data import DataLoader
import pandas as pd
import torch
import logging

# Enable logging
logging.basicConfig(format='%(asctime)s - %(message)s',
                    datefmt='%Y-%m-%d %H:%M:%S',
                    level=logging.INFO)

def main():
    # Step 1: Load the dataset
    df = pd.read_csv('data/similar_questions.csv')

    # Step 2: Prepare the data
    train_examples = []
    for index, row in df.iterrows():
        train_examples.append(
            InputExample(texts=[row['sentence1'], row['sentence2']], label=row['label'])
        )

    # Step 3: Load the pre-trained SBERT model from local directory
    model_path = 'models/all-MiniLM-L6-v2'  # Update this path accordingly
    model = SentenceTransformer(model_path)

    # Step 4: Define the training objective
    # For regression (similarity scores)
    train_loss = losses.CosineSimilarityLoss(model)

    # For classification (binary labels), uncomment the following:
    # train_loss = losses.SoftmaxLoss(model=model, sentence_embedding_dimension=model.get_sentence_embedding_dimension(), num_labels=2)

    # Step 5: Create a DataLoader
    train_dataloader = DataLoader(train_examples, shuffle=True, batch_size=16)

    # Step 6: Fine-tune the model
    num_epochs = 4
    warmup_steps = int(len(train_dataloader) * num_epochs * 0.1)  # 10% of train data

    model.fit(
        train_objectives=[(train_dataloader, train_loss)],
        epochs=num_epochs,
        warmup_steps=warmup_steps,
        device=torch.device('cuda' if torch.cuda.is_available() else 'cpu')
    )

    # Step 7: Save the fine-tuned model
    model.save('models/fine-tuned-sbert')

if __name__ == "__main__":
    main()


from sentence_transformers import SentenceTransformer
from sklearn.metrics.pairwise import cosine_similarity
import pandas as pd
import numpy as np

def load_fine_tuned_model():
    # Load the fine-tuned SBERT model
    model = SentenceTransformer('models/fine-tuned-sbert')
    return model

def generate_embeddings(model, questions):
    embeddings = model.encode(questions, convert_to_tensor=True)
    return embeddings.cpu().numpy()

def find_similar_pairs(similarity_matrix, threshold=0.8):
    similar_pairs = np.argwhere(similarity_matrix > threshold)
    # Remove self-pairs and duplicate pairs
    similar_pairs = [(i, j) for i, j in similar_pairs if i < j]
    return similar_pairs

def main():
    # Load the fine-tuned model
    model = load_fine_tuned_model()

    # Load your unanswered questions
    df_unanswered = pd.read_csv('data/unanswered_questions.csv')  # Update path as needed

    # Generate embeddings
    embeddings = generate_embeddings(model, df_unanswered['Question'].tolist())

    # Compute cosine similarity matrix
    similarity_matrix = cosine_similarity(embeddings)

    # Find similar pairs based on threshold
    threshold = 0.8
    similar_pairs = find_similar_pairs(similarity_matrix, threshold)

    # Display similar question pairs
    for i, j in similar_pairs:
        print(f"Question {i+1} and Question {j+1} are similar:")
        print(f"Q{i+1}: {df_unanswered.iloc[i]['Question']}")
        print(f"Q{j+1}: {df_unanswered.iloc[j]['Question']}\n")

if __name__ == "__main__":
    main()



import os
import xml.etree.ElementTree as ET
import shutil
from typing import List, Tuple, Dict

# Mapping of connector namespaces to their corresponding Maven groupId and artifactId
CONNECTOR_DEPENDENCY_MAP = {
    'http://www.mulesoft.org/schema/mule/http': ('org.mule.connectors', 'mule-http-connector'),
    'http://www.mulesoft.org/schema/mule/db': ('org.mule.connectors', 'mule-db-connector'),
    'http://www.mulesoft.org/schema/mule/file': ('org.mule.connectors', 'mule-file-connector'),
    'http://www.mulesoft.org/schema/mule/ftp': ('org.mule.connectors', 'mule-ftp-connector'),
    'http://www.mulesoft.org/schema/mule/jms': ('org.mule.connectors', 'mule-jms-connector'),
    'http://www.mulesoft.org/schema/mule/vm': ('org.mule.connectors', 'mule-vm-connector'),
    # Add more mappings as needed
}

def parse_domain_resources(domain_path: str) -> Tuple[Dict[str, List[ET.Element]], set]:
    resources = {
        'connectors': [],
        'global_configs': [],
        'error_handlers': [],
        'security_configs': [],
        'schedulers': [],
        'transformers': [],
        'spring_beans': [],
        'other': []
    }
    used_namespaces = set()

    config_path = os.path.join(domain_path, "src", "main", "mule", "mule-domain-config.xml")
    tree = ET.parse(config_path)
    root = tree.getroot()

    # Collect used namespaces
    for key, value in root.attrib.items():
        if key.startswith('xmlns:'):
            used_namespaces.add(value)

    for child in root:
        if '}' in child.tag:
            namespace = child.tag.split('}')[0][1:]  # Extract namespace
            used_namespaces.add(namespace)
            tag = child.tag.split('}')[1]
            if any(x in tag for x in ['config', 'configuration']):
                resources['connectors'].append(child)
            elif tag == 'global-property':
                resources['global_configs'].append(child)
            elif tag == 'error-handler':
                resources['error_handlers'].append(child)
            elif 'security' in tag or 'oauth' in tag:
                resources['security_configs'].append(child)
            elif 'scheduler' in tag:
                resources['schedulers'].append(child)
            elif 'transformer' in tag:
                resources['transformers'].append(child)
            elif tag == 'beans':
                resources['spring_beans'].append(child)
            else:
                resources['other'].append(child)

    return resources, used_namespaces

def update_project_config(project_path: str, resources: Dict[str, List[ET.Element]], used_namespaces: set):
    config_path = os.path.join(project_path, "src", "main", "mule", "mule-config.xml")
    tree = ET.parse(config_path)
    root = tree.getroot()

    # Add all resources to the project config
    for resource_list in resources.values():
        for resource in resource_list:
            root.append(resource)

    # Update namespaces
    for namespace in used_namespaces:
        for prefix, uri in root.attrib.items():
            if uri == namespace:
                break
        else:
            # If namespace not found, add it with a generated prefix
            i = 1
            while f'xmlns:ns{i}' in root.attrib:
                i += 1
            root.set(f'xmlns:ns{i}', namespace)

    tree.write(config_path, encoding="UTF-8", xml_declaration=True)

def update_project_pom(project_path: str, domain_path: str, used_namespaces: set):
    domain_pom_path = os.path.join(domain_path, "pom.xml")
    project_pom_path = os.path.join(project_path, "pom.xml")

    domain_tree = ET.parse(domain_pom_path)
    domain_root = domain_tree.getroot()

    project_tree = ET.parse(project_pom_path)
    project_root = project_tree.getroot()

    # Transfer dependencies
    domain_deps = domain_root.find("./{*}dependencies")
    if domain_deps is not None:
        project_deps = project_root.find("./{*}dependencies")
        if project_deps is None:
            project_deps = ET.SubElement(project_root, "dependencies")

        for dep in domain_deps:
            if dep.find("./{*}classifier") is None or dep.find("./{*}classifier").text != "mule-domain":
                project_deps.append(dep)

    # Add connector dependencies based on used namespaces
    for namespace in used_namespaces:
        if namespace in CONNECTOR_DEPENDENCY_MAP:
            group_id, artifact_id = CONNECTOR_DEPENDENCY_MAP[namespace]
            new_dep = ET.SubElement(project_deps, "dependency")
            ET.SubElement(new_dep, "groupId").text = group_id
            ET.SubElement(new_dep, "artifactId").text = artifact_id
            # You might want to specify a version or use a property for versioning
            # ET.SubElement(new_dep, "version").text = "${mule.version}"

    # Transfer properties
    domain_props = domain_root.find("./{*}properties")
    if domain_props is not None:
        project_props = project_root.find("./{*}properties")
        if project_props is None:
            project_props = ET.SubElement(project_root, "properties")

        for prop in domain_props:
            if not project_props.find(f".//{prop.tag}"):
                project_props.append(prop)

    # Remove domain dependency
    for dep in project_root.findall(".//{*}dependency"):
        artifact_id = dep.find("./{*}artifactId")
        classifier = dep.find("./{*}classifier")
        if (artifact_id is not None and artifact_id.text == "my-domain-project" and
            classifier is not None and classifier.text == "mule-domain"):
            project_deps.remove(dep)

    project_tree.write(project_pom_path, encoding="UTF-8", xml_declaration=True)

def migrate_project(domain_path: str, project_path: str):
    print(f"Migrating project: {os.path.basename(project_path)}")

    # Parse domain resources and collect used namespaces
    resources, used_namespaces = parse_domain_resources(domain_path)

    # Update project configuration
    update_project_config(project_path, resources, used_namespaces)

    # Update project pom
    update_project_pom(project_path, domain_path, used_namespaces)

    # Copy any additional resources
    domain_resources_path = os.path.join(domain_path, "src", "main", "resources")
    project_resources_path = os.path.join(project_path, "src", "main", "resources")
    if os.path.exists(domain_resources_path):
        for item in os.listdir(domain_resources_path):
            s = os.path.join(domain_resources_path, item)
            d = os.path.join(project_resources_path, item)
            if os.path.isfile(s):
                shutil.copy2(s, d)

    print(f"Migration completed for project: {os.path.basename(project_path)}")

def main():
    domain_path = "/path/to/domain/project"
    projects = [
        "/path/to/project1",
        "/path/to/project2",
        # Add more project paths as needed
    ]

    for project_path in projects:
        migrate_project(domain_path, project_path)

if __name__ == "__main__":
    main()


