# setup.py
from setuptools import setup, find_packages
from pathlib import Path
import os
import site

def generate_env_file():
    """Generate .env file with default configuration"""
    # Determine installation directory
    # For pip install edt_service.tar.gz, this will be in site-packages
    if 'pip' in __file__:
        # When installed via pip, use site-packages directory
        install_dir = Path(site.getsitepackages()[0]) / 'edt_service'
    else:
        # For development, use current directory
        install_dir = Path.cwd()
    
    env_file = install_dir / '.env'
    print(f"\nGenerating .env file at: {env_file.absolute()}")
    
    # Default configuration
    env_defaults = {
        # Exchange settings
        'EXCHANGE_SERVER': 'outlook.office365.com',
        'EXCHANGE_FOLDER': 'Inbox',
        
        # JIRA settings
        'JIRA_URL': 'https://your-company.atlassian.net',
        'JIRA_PROJECT': 'PROJ',
        
        # Scheduler settings
        'SCHEDULER_ENABLED': 'True',
        'SCHEDULER_INTERVAL': '300',
        
        # Logging settings
        'LOG_LEVEL': 'INFO',
        'LOG_FILE': 'app.log',
    }
    
    # Create directory if it doesn't exist
    env_file.parent.mkdir(parents=True, exist_ok=True)
    
    # Write .env file if it doesn't exist
    if not env_file.exists():
        with open(env_file, 'w') as f:
            for key, value in env_defaults.items():
                f.write(f'{key}={value}\n')
            
            # Add commented section for secrets
            f.write('\n# Secrets to be set using config_manager.py:\n')
            f.write('# EXCHANGE_PASSWORD_ENCRYPTED=\n')
            f.write('# EXCHANGE_EMAIL=\n')
            f.write('# JIRA_TOKEN_ENCRYPTED=\n')
        print(f"Created new .env file at {env_file}")
    else:
        print(f".env file already exists at {env_file}, skipping generation")

setup(
    name='edt_service',
    version='1.0.0',
    packages=find_packages(),
    install_requires=[
        'flask',
        'flask-apscheduler',
        'python-dotenv',
        'cryptography',
        # other dependencies
    ],
    # Call generate_env_file during installation
    cmdclass={
        'install': lambda command: (generate_env_file(), command),
        'develop': lambda command: (generate_env_file(), command),
    }
)

import smtplib

   def test_smtp_connection(host, port):
       try:
           with smtplib.SMTP(host, port, timeout=10) as server:
               server.ehlo()
               print(f"Successfully connected to {host} on port {port}")
               return True
       except Exception as e:
           print(f"Failed to connect to {host} on port {port}")
           print(f"Error: {str(e)}")
           return False

   if __name__ == "__main__":
       test_smtp_connection("amtastage.boa.com", 25)

import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

def send_anonymous_email(subject, body, to_recipients, cc_recipients=None):
    # SMTP server details
    smtp_server = "amtastage.boa.com"
    smtp_port = 25

    # Create message
    msg = MIMEMultipart()
    msg['Subject'] = "Re: " + subject
    msg['From'] = "noreply@example.com"  # This can be any address, as it's anonymous
    msg['To'] = ", ".join(to_recipients)
    if cc_recipients:
        msg['Cc'] = ", ".join(cc_recipients)

    # Add body to email
    msg.attach(MIMEText(body, 'plain'))

    # Connect to the SMTP server and send the email
    try:
        with smtplib.SMTP(smtp_server, smtp_port) as server:
            # If the server requires STARTTLS, uncomment the next line
            # server.starttls()

            recipients = to_recipients + (cc_recipients if cc_recipients else [])
            server.sendmail(msg['From'], recipients, msg.as_string())
        print("Mail Sent")
    except Exception as e:
        print(f"Failed to send email: {str(e)}")

# Example usage
subject = "Your original subject"
body = "Thank you for reaching out to Enterprise Developer Tooling. A ticket has been created for your reference https://jira3.hon..."
to_recipients = ["recipient@example.com"]
cc_recipients = ["cc_recipient@example.com"]

# Remove specific recipients
recipients_to_remove = ['edt-service@bofa.com']
filtered_to_recipients = [rec for rec in to_recipients if rec not in recipients_to_remove]
filtered_cc_recipients = [rec for rec in cc_recipients if rec not in recipients_to_remove] if cc_recipients else None

send_anonymous_email(subject, body, filtered_to_recipients, filtered_cc_recipients)